name: mesmer CI-CD
on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:

jobs:
  linting-and-docs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: [3.8]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Cache conda
      uses: actions/cache@v2
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-py${{ matrix.python-version }}-${{
          hashFiles('environment.yml') }}
    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v2.0.1
      with:
        channels: conda-forge
        channel-priority: strict
        activate-environment: mesmer-tests
        auto-update-conda: false
        python-version: ${{ matrix.python-version }}
    - name: Conda info
      shell: bash -l {0}
      run: conda info
    - name: Run format and linting tests
      shell: bash -l {0}
      run: |
          which python
          make -B conda-environment
          isort --check mesmer examples tests setup.py
          black --check mesmer examples tests setup.py docs/source/conf.py
          flake8 mesmer examples tests setup.py

  test:
    name: py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: [3.8]
    defaults:
      run:
        shell: bash -l {0}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Cache conda
      uses: actions/cache@v2
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-py${{ matrix.python-version }}-${{ hashFiles('environment.yml') }}
    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v2.0.1
      with:
        channels: conda-forge
        channel-priority: strict
        activate-environment: mesmer-tests
        auto-update-conda: false
        python-version: ${{ matrix.python-version }}
    - name: Conda info
      run: conda info
    - name: Install environment
      run: |
          which python
          make -B conda-environment
    - name: Conda list
      run: conda list
    - name: Run tests
      run: |
          which python
          make -B test_cov_xml
    - name: Upload code coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
          file: ./coverage.xml
          flags: unittests
          env_vars: RUNNER_OS,PYTHON_VERSION
          name: codecov-umbrella
          fail_ci_if_error: false




  test-install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    defaults:
      run:
        shell: bash -l {0}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Cache conda
      uses: actions/cache@v2
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-py${{ matrix.python-version }}-${{ hashFiles('environment.yml') }}
    - name: Setup conda
      uses: conda-incubator/setup-miniconda@v2.0.1
      with:
        channels: conda-forge
        channel-priority: strict
        activate-environment: mesmer-tests
        auto-update-conda: false
        python-version: ${{ matrix.python-version }}
    - name: Conda info
      run: conda info
    - name: Test installation
      run: |
          make -B conda-environment
          python scripts/test_install.py

  deploy-pypi:
    needs: [linting-and-docs,test,test-install]
    if: |
      startsWith(github.ref, 'refs/tags/v')
      && (github.ref == 'refs/heads/master')

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip wheel twine
    - name: Create package
      run: python setup.py sdist bdist_wheel --universal
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
